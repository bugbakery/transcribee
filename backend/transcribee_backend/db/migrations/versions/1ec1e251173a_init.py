"""init

Revision ID: 1ec1e251173a
Revises:
Create Date: 2023-04-28 20:52:30.276317

"""
import sqlalchemy as sa
import sqlmodel
import sqlmodel.sql.sqltypes
from alembic import op

# revision identifiers, used by Alembic.
revision = "1ec1e251173a"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user",
        sa.Column("username", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("password_hash", sa.LargeBinary(), nullable=False),
        sa.Column("password_salt", sa.LargeBinary(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("username"),
    )
    with op.batch_alter_table("user", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_user_id"), ["id"], unique=False)

    op.create_table(
        "worker",
        sa.Column("last_seen", sa.DateTime(timezone=True), nullable=True),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("token", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("worker", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_worker_id"), ["id"], unique=False)

    op.create_table(
        "document",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("changed_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("user_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("document", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_document_id"), ["id"], unique=False)

    op.create_table(
        "usertoken",
        sa.Column("valid_until", sa.DateTime(timezone=True), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("user_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("token_hash", sa.LargeBinary(), nullable=False),
        sa.Column("token_salt", sa.LargeBinary(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("usertoken", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_usertoken_id"), ["id"], unique=False)

    op.create_table(
        "documentmediafile",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("changed_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("document_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("file", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("content_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(
            ["document_id"],
            ["document.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("documentmediafile", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_documentmediafile_id"), ["id"], unique=False
        )

    op.create_table(
        "documentupdate",
        sa.Column("change_bytes", sa.LargeBinary(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("document_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["document_id"],
            ["document.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("documentupdate", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_documentupdate_id"), ["id"], unique=False)

    op.create_table(
        "task",
        sa.Column("task_parameters", sa.JSON(), nullable=False),
        sa.Column("task_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("document_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("progress", sa.Float(), nullable=True),
        sa.Column("assigned_worker_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("assigned_at", sa.DateTime(), nullable=True),
        sa.Column("last_keepalive", sa.DateTime(), nullable=True),
        sa.Column("is_completed", sa.Boolean(), nullable=False),
        sa.Column("completed_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["assigned_worker_id"],
            ["worker.id"],
        ),
        sa.ForeignKeyConstraint(
            ["document_id"],
            ["document.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("task", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_task_id"), ["id"], unique=False)

    op.create_table(
        "documentmediatag",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("tag", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("media_file_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["media_file_id"],
            ["documentmediafile.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("documentmediatag", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_documentmediatag_id"), ["id"], unique=False
        )

    op.create_table(
        "taskdependency",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("dependent_task_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("dependant_on_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["dependant_on_id"],
            ["task.id"],
        ),
        sa.ForeignKeyConstraint(
            ["dependent_task_id"],
            ["task.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("taskdependency", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_taskdependency_id"), ["id"], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("taskdependency", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_taskdependency_id"))

    op.drop_table("taskdependency")
    with op.batch_alter_table("documentmediatag", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_documentmediatag_id"))

    op.drop_table("documentmediatag")
    with op.batch_alter_table("task", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_task_id"))

    op.drop_table("task")
    with op.batch_alter_table("documentupdate", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_documentupdate_id"))

    op.drop_table("documentupdate")
    with op.batch_alter_table("documentmediafile", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_documentmediafile_id"))

    op.drop_table("documentmediafile")
    with op.batch_alter_table("usertoken", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_usertoken_id"))

    op.drop_table("usertoken")
    with op.batch_alter_table("document", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_document_id"))

    op.drop_table("document")
    with op.batch_alter_table("worker", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_worker_id"))

    op.drop_table("worker")
    with op.batch_alter_table("user", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_user_id"))

    op.drop_table("user")
    # ### end Alembic commands ###
